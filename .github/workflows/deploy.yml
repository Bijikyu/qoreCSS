name: Build and Deploy # pipeline name for GitHub Actions

on:
  push:
    branches: [main] # run when changes pushed to main
  workflow_dispatch: # allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest # use latest Ubuntu runner
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # fetch repo contents
      - name: Setup Node
        uses: actions/setup-node@v3 # install Node.js
        with:
          node-version: 18 # chosen Node version
      - name: Cache node modules #added cache step to speed installs
        uses: actions/cache@v3 # cache action for dependencies
        with:
          path: node_modules # directory to cache
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }} # unique cache key
          restore-keys: |
            ${{ runner.os }}-node- # fallback key prefix
      - name: Install dependencies
        run: npm ci # install packages
      - name: Lint CSS
        run: npm run lint # ensure styles follow rules before build
      - name: Build CSS
        run: npm run build # generate core.<hash>.min.css
      - name: Compute hash and rename CSS
        run: |
          HASH=$(sha1sum core.min.css 2>/dev/null | cut -c1-8 || cat build.hash)
          if [ -f core.min.css ]; then mv core.min.css core.$HASH.min.css; fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1 # package files for deployment
        with:
          path: . # upload entire repo
  tag: # job to create release tags #adds tagging job
    needs: build # wait for build job #ensures build completed
    runs-on: ubuntu-latest # use same runner #uses ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3 # fetch repo to tag
      - name: Create tag from commits
        id: tag # store outputs
        uses: mathieudutour/github-tag-action@v6.1 # semantic tag action
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # auth for tag push
      - name: Echo tag
        run: echo "New tag ${{ steps.tag.outputs.new_tag }} created" # confirm tag
  deploy:
    needs: tag # deploy after tagging #ensures new tag exists
    runs-on: ubuntu-latest # same environment for deploy
    permissions:
      pages: write # allow page deployment
      id-token: write # GitHub pages token
    environment:
      name: github-pages # pages env
      url: ${{ steps.deploy.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v1 # push artifact to pages
