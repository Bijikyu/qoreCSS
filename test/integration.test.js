/*
 * INTEGRATION TESTING - BUILD AND HTML UPDATE WORKFLOW
 * 
 * PURPOSE AND RATIONALE:
 * This test suite validates the complete integration between the build script
 * and HTML update functionality, ensuring the end-to-end deployment workflow
 * works correctly. Integration testing is essential because these scripts must
 * coordinate precisely for successful CSS framework deployment.
 * 
 * TESTING STRATEGY:
 * - Tests actual script coordination rather than individual components
 * - Validates hash consistency across build and HTML update processes
 * - Confirms CDN URL templating works with environment variables
 * - Uses realistic HTML with both hash and CDN placeholder patterns
 * 
 * This approach ensures the deployment pipeline produces correctly configured
 * HTML that references the exact CSS files generated by the build process.
 */

require("./helper"); // loads module stubbing for consistent test environment
const assert = require('node:assert'); // Node.js built-in assertion library for test validation
const fs = require('node:fs'); // file system operations for test setup and validation
const path = require('node:path'); // path utilities for cross-platform file handling
const os = require('node:os'); // operating system utilities for temporary directory creation
const {describe, it, before, after} = require('node:test'); // Node.js native test framework components
let build, updateHtml; // script function references, assigned after module cache clearing
let tmpDir; // temporary directory path for isolated test execution

/*
 * INTEGRATION TEST SETUP
 * 
 * WORKFLOW SIMULATION STRATEGY:
 * Creates a realistic deployment scenario with HTML containing both hash
 * placeholders and CDN templates. This setup mirrors actual deployment
 * conditions where build and HTML update scripts must coordinate perfectly.
 */
before(() => {
  process.env.CODEX = 'True'; // forces offline mode to prevent network dependencies
  tmpDir = fs.mkdtempSync(path.join(os.tmpdir(), 'integ-')); // creates unique temporary directory for test isolation
  fs.writeFileSync(path.join(tmpDir, 'qore.css'), 'body{}'); // minimal CSS input for build processing
  fs.writeFileSync(path.join(tmpDir, 'index.html'), '<link href="core.aaaaaaaa.min.css">\n{{CDN_BASE_URL}}'); // realistic HTML with hash placeholder and CDN template
  process.chdir(tmpDir); // changes working directory to temporary location for script execution
  delete require.cache[require.resolve('../scripts/build')]; // clears build script cache for fresh execution
  delete require.cache[require.resolve('../scripts/updateHtml')]; // clears HTML update script cache for fresh execution
  build = require('../scripts/build'); // imports build function after cache clearing
  updateHtml = require('../scripts/updateHtml'); // imports updateHtml function after cache clearing
});

/*
 * INTEGRATION TEST CLEANUP
 * 
 * CLEANUP RATIONALE:
 * Restores original working directory and removes all test artifacts to
 * prevent integration test state from affecting subsequent tests. Proper
 * cleanup ensures test environment isolation and consistency.
 */
after(() => {
  process.chdir(path.resolve(__dirname, '..')); // restores original working directory
  fs.rmSync(tmpDir, {recursive: true, force: true}); // removes temporary directory and all contents
});

/*
 * END-TO-END WORKFLOW VALIDATION
 * 
 * TESTING SCOPE:
 * Validates the complete deployment workflow by executing build and HTML
 * update scripts in sequence, then verifying the final HTML contains
 * correct hash references and CDN URLs. This confirms deployment readiness.
 */
describe('build and updateHtml', {concurrency:false}, () => {
  /*
   * COMPLETE DEPLOYMENT WORKFLOW VALIDATION
   * 
   * TEST STRATEGY:
   * Executes the full deployment sequence (build â†’ updateHtml) and validates
   * that the final HTML correctly references the generated CSS with proper
   * CDN configuration. This test ensures deployment scripts coordinate correctly.
   */
  it('builds and updates html', async () => {
    const hash = await build(); // executes build script and captures generated hash
    process.env.CDN_BASE_URL = 'http://cdn'; // sets CDN environment variable for HTML update
    await updateHtml(); // executes HTML update with build hash and CDN configuration
    const html = fs.readFileSync(path.join(tmpDir, 'index.html'), 'utf8'); // reads final HTML for validation
    assert.ok(html.includes(`core.${hash}.min.css`)); // confirms hash was properly injected into HTML
    assert.ok(html.includes('http://cdn')); // confirms CDN URL template was properly replaced
  });
});
